    <!-- ======================================================== B -->
    <section anchor="complex"
    title="The effects of ACK scheduling">

      <t>For many network technologies simple queuing models don't
      apply: the network schedules, thins or otherwise alters the
      timing of ACKs and data, generally to raise the efficiency of
      the channel allocation algorithms when confronted with
      relatively widely spaced small ACKs. These efficiency
      strategies are ubiquitous for half duplex, wireless and
      broadcast media.</t>

      <t>Altering the ACK stream by holding or thinning ACKs
      typically has two consequences: it raises the implied
      bottleneck IP capacity, making the fine grained slowstart
      bursts either faster or larger and it raises the effective
      RTT by the average time that the ACKs and data are delayed.
      The first effect can be partially mitigated by re-clocking
      ACKs once they are beyond the bottleneck on the return path
      to the sender, however this further raises the effective
      RTT.</t>

      <t>The most extreme example of this sort of behavior would be
      a half duplex channel that is not released as long as the
      endpoint currently holding the channel has more traffic (data
      or ACKs) to send. Such environments cause self clocked
      protocols under full load to revert to extremely inefficient
      stop and wait behavior. The channel constrains the protocol
      to send an entire window of data as a single contiguous burst
      on the forward path, followed by the entire window of ACKs on
      the return path.</t>

      <t>If a particular return path contains a subpath or device
      that alters the timing of the ACK stream, then the entire
      front path from the sender up to the bottleneck must be
      tested at the burst parameters implied by the ACK scheduling
      algorithm. The most important parameter is the Implied
      Bottleneck IP Capacity, which is the average rate at which
      the ACKs advance snd.una. Note that thinning the ACK stream
      (relying on the cumulative nature of seg.ack to permit
      discarding some ACKs) causes most TCP implementations to send
      interface rate bursts
      to offset the longer times between ACKs in order to maintain
      the average data rate.</t>

      <t>Note that due to ubiquitous self
      clocking in Internet protocols, ill conceived channel
      allocation mechanisms are likely to
      increases the queuing stress on the
      front path because they cause larger full sender rate data
      bursts.</t>

      <t>Holding data or ACKs for channel allocation or other
      reasons (such as forward error correction) always raises the
      effective RTT relative to the minimum delay for the path.
      Therefore it may be necessary to replace target_RTT in the
      calculation in 
      <xref target="models" /> by an effective_RTT, which includes
      the target_RTT plus a term to account for the extra delays
      introduced by these mechanisms.</t>
    </section>
