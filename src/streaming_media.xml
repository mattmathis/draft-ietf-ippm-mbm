        <section anchor="streaming_media" title="Passive Measurements">

         <t>
	  Any non-throughput maximizing application,
	  such as fixed rate streaming media,
	  can be used to implement passive or hybrid <xref target="RFC7799" /> versions of 
	  Model Based Metrics with some additional instrumentation 
	  and possibly a traffic shaper or other controls in the servers.
	  The essential
          requirement is that the data transmission be constrained such
          that even with arbitrary application pauses and bursts,
          the data rate and burst sizes stay within the envelope
          defined by the individual tests described above.

<!-- @@@@ I suspect this is a difficult constraint to meet in the wild, because
of strategies to send at a "higher than playout" rate to fill the
initial buffer faster, and rate adaptation which is apparently 
widespread now (DASH). Another issue is "double chunking"
where the player downloads two chunks for the same time period,
possibly at different quality levels (different rates). - ACM
I consideed adding a reference here, but it would have to be OS
specific, and not really relevant in a standard.  e.g.
search: pkt_sched fq Fair Queue packet scheduler
- MM
-->
</t>

          <t>If the application's serving data rate can be
	  constrained to be less than or
          equal to the target_data_rate and the serving_RTT (the
          RTT between the sender and client) is less than the
          target_RTT, this constraint is most easily implemented by
          clamping the transport window size to serving_window_clamp,
	  set to the test_window,
	  computed for the actual serving path.
	  </t>

          <t>Under the above constraints the serving_window_clamp
          will limit the both the serving data rate and burst sizes
          to be no larger than the procedures in 
          <xref target="windowed_rate" /> and 
          <xref target="sender_rate" /> or 
          <xref target="sustained_burst" />. Since the serving RTT
          is smaller than the target_RTT, the worst case bursts
          that might be generated under these conditions will be
          smaller than called for by 
          <xref target="sender_rate" /> and the sender rate burst
          sizes are implicitly derated by the serving_window_clamp
          divided by the target_window_size at the very least.
          (Depending on the application behavior, the data might be
          significantly smoother than specified by any of the burst
          tests.)</t>

          <t>In an alternative implementation the data rate and
          bursts might be explicitly controlled by a programmable
          traffic shaper or pacing at the sender. This would
          provide better control over transmissions but is more
	  complicated to implement, although the required technology is
	  available <xref target="TSO_pacing" /><xref target="TSO_fq_pacing" />.
	  </t>

          <t>Note that these techniques can be applied to any
          content delivery that can operated at a constrained data
          rate to inhibit TCP equilibrium behavior.</t>

	  <t>Furthermore note that Dynamic Adaptive Streaming over HTTP (DASH)
	  is generally in conflict with passive 
	  Model Based Metrics measurement,
	  because it is a rate maximizing protocol.
	  It can still meet the requirement here if the rate can be capped, for example by 
	  knowing a priori the maximum rate needed to deliver
	  a particular piece of content.
	  </t>
        </section>
